#!/usr/bin/env bash

# - Show user their drives installed on the computer
showUserTheirDrives () {
    DRIVES=$( df -h )
    echo "$DRIVES"
    #sudo touch testDoc
    #sudo echo "$DRIVES" >> testDoc
  }
# - Step 1:  
askUserForNetwork () {
    echo "------------------------------------------------------------------------------------"
    echo "Bitcoin - Step 1: We will start with choosing a Bitcoin Network - Mainnet or Testnet"
    echo "------------------------------------------------------------------------------------"
      select USERGIVENNETWORKCHOICE in Mainnet Testnet Exit
      do
          case $USERGIVENNETWORKCHOICE in
              Mainnet )
              while true; do    
                read -r -p "Confirm you want to use the Bitcoin "$USERGIVENNETWORKCHOICE" network: Yes or No: `echo $'\n> '`" USERGIVENNETWORKCHOICEANSWER
                    case $USERGIVENNETWORKCHOICEANSWER in
                        [yY][eE][sS]|[yY] )
                          echo
                          break
                        ;;
                        [nN][oO]|[nN] ) 
                          echo ""
                          askUserForNetwork
                          break    
                        ;;
                        * ) 
                          echo ""
                          echo "--------------------------------------"
                          echo "--------------------------------------"
                          echo "Invalid choice, please enter Yes or No"
                          echo "--------------------------------------"
                          echo "--------------------------------------"
                          break
                        ;;    
                    esac
                    done
                    break
                    ;;       
              Testnet )
              while true; do    
                read -r -p "Confirm you want to use the Bitcoin "$USERGIVENNETWORKCHOICE" network: Yes or No: `echo $'\n> '`" USERGIVENNETWORKCHOICEANSWER
                    case $USERGIVENNETWORKCHOICEANSWER in
                        [yY][eE][sS]|[yY] )
                          break
                        ;;
                        [nN][oO]|[nN] ) 
                          echo ""
                          askUserForNetwork
                          break    
                        ;;
                        * ) 
                          echo ""
                          echo "--------------------------------------"
                          echo "--------------------------------------"
                          echo "Invalid choice, please enter Yes or No"
                          echo "--------------------------------------"
                          echo "--------------------------------------"
                        ;;    
                    esac
                    done
                    break
                    ;; 
              Exit )
                echo ""
                echo "------------------------------------------------"
                echo "------------------------------------------------"
                echo "------------------------------------------------"
                echo "Exiting Bitcoin Core and Lightning LND Installer"
                echo "------------------------------------------------"
                echo "------------------------------------------------"
                echo "------------------------------------------------"
                exit
                sleep 1.5
                break
              ;;
              * ) 
                echo ""
                echo "-------------------------------------------------"
                echo "-------------------------------------------------"
                echo "Invalid choice, please choose from the list above"
                echo "-------------------------------------------------"
                echo "-------------------------------------------------"
              ;;    
      esac
      done
      }
# - Step 2: 
askUserForBitcoinDataDir () {
    if [ "$USERGIVENNETWORKCHOICE" == "Mainnet" ] 
     then
        echo "" 
        echo "-------------------------------------------------------------------------"
        echo "Bitcoin - Step 2: Locate your mounted drive path in the last column below" 
        echo "-------------------------------------------------------------------------"
        echo "This is where Bitcoin "$USERGIVENNETWORKCHOICE"'s data directory will be stored. You will need 300 GB minimum"
        echo "-------------------------------------------------------------------------------------------"
        echo ""
        showUserTheirDrives
        echo ""
        read -r -p "Type the path to your "$USERGIVENNETWORKCHOICE" Bitcoin data directory. Type default to skip this step `echo $'\n '` Format example -> /media/user/Bitcoin_Testnet `echo $'\n> '`" USERGIVENBITCOINDATADIR
        echo "--------------------------------------------------------------------"
            while true; do      
            read -r -p "You have set "$USERGIVENBITCOINDATADIR" as your Bitcoin "$USERGIVENNETWORKCHOICE" data directory, is this correct, Yes or No: `echo $'\n> '`" USERGIVENBITCOINDATADIRANSWER
                case $USERGIVENBITCOINDATADIRANSWER in
                    [yY][eE][sS]|[yY] )
                        sleep .15
                        break
                    ;;
                    nN][oO]|[nN] ) 
                        askUserForBitcoinDataDir
                        sleep .15
                        break
                    ;;
                    * ) 
                        echo ""
                        echo "--------------------------------------"
                        echo "--------------------------------------"
                        echo "Invalid choice, please enter Yes or No"
                        echo "--------------------------------------"
                        echo "--------------------------------------"
                    ;;
                esac
                done
    else
        echo "" 
        echo "---------------------------------------------------------------"
        echo "Step 2: Locate your mounted drive path in the last column below" 
        echo "---------------------------------------------------------------"
        echo "This is where Bitcoin "$USERGIVENNETWORKCHOICE"'s data directory will be stored. You will need 50 GB minimum"
        echo "-------------------------------------------------------------------------------------------"
        echo ""
        showUserTheirDrives
        echo ""
        read -r -p "Type the path to your "$USERGIVENNETWORKCHOICE" Bitcoin data directory. Type default to skip this step `echo $'\n '` Format example -> /media/user/Bitcoin_Testnet `echo $'\n> '`" USERGIVENBITCOINDATADIR
        echo "--------------------------------------------------------------------" 
            while true; do    
            read -r -p "You have set "$USERGIVENBITCOINDATADIR" as your Bitcoin "$USERGIVENNETWORKCHOICE" data directory, is this correct, Yes or No: `echo $'\n> '`" USERGIVENBITCOINDATADIRANSWER
                case $USERGIVENBITCOINDATADIRANSWER in
                    [yY][eE][sS]|[yY] )
                        sleep .15
                        break
                    ;;
                    nN][oO]|[nN] ) 
                        askUserForBitcoinDataDir
                        sleep .15
                        break
                    ;;
                    * ) 
                        echo ""
                        echo "--------------------------------------"
                        echo "--------------------------------------"
                        echo "Invalid choice, please enter Yes or No"
                        echo "--------------------------------------"
                        echo "--------------------------------------"
                    ;;
                esac
                done
    fi 
  }
# - Step 3:
askUserForBitcoinProgramToInstallOrRun () {
    echo "-------------------------------------------------------------------------------------------"
    echo "Step 3: Choose the program you wish to install or run on the Bitcoin "$USERGIVENNETWORKCHOICE" network:"
    echo "-------------------------------------------------------------------------------------------"
      select USERGIVENPROGRAMRUNINSTALL in "Install Bitcoin Core"  "Install LND" "Run Bitcoin Core" "Run LND" "LND CLI Commands" "Run Bitcoind & LND" "Install & Run Bitcoind & LND" "Change Bitcoin Network" "Quit The Bitcoin Core Installer"
      do
          case $USERGIVENPROGRAMRUNINSTALL in
            "Install Bitcoin Core" )
              while true; do 
                echo ""
                read -r -p "Confirm you want to $USERGIVENPROGRAMRUNINSTALL on Bitcoin's $USERGIVENNETWORKCHOICE network:  Yes or No: `echo $'\n> '`" USERGIVENPROGRAMRUNINSTALLANSWER
                    case $USERGIVENPROGRAMRUNINSTALLANSWER in
                        [yY][eE][sS]|[yY] )
                        # - Step 4: 
                            echo "" 
                            bitcoinInstallFunction
                            break
                        ;;
                        [nN][oO]|[nN] )
                            echo "" 
                            askUserForBitcoinProgramToInstallOrRun
                            break    
                        ;;
                        * ) 
                            echo ""
                            echo "--------------------------------------"
                            echo "--------------------------------------"
                            echo "Invalid choice, please enter Yes or No"
                            echo "--------------------------------------"
                            echo "--------------------------------------"
                            echo ""
                            ;;    
                    esac
                    done
                    break
                    ;;           
            "Install LND" )
              installLnd
              askUserForBitcoinProgramToInstallOrRun
              ;;
            "Run Bitcoin Core" )
              while true; do
                echo ""  
                read -r -p "Confirm you want to $USERGIVENPROGRAMRUNINSTALL on Bitcoin's "$USERGIVENNETWORKCHOICE" network: Yes or No: `echo $'\n> '`" USERGIVENPROGRAMRUNINSTALLANSWER
                    case $USERGIVENPROGRAMRUNINSTALLANSWER in
                        [yY][eE][sS]|[yY] )
                          startRunningBitcoinCoreOptions
                          break
                        ;;
                        [nN][oO]|[nN] ) 
                          echo ""
                          askUserForBitcoinProgramToInstallOrRun   
                          break 
                        ;;
                        * ) 
                          echo ""
                          echo "--------------------------------------"
                          echo "--------------------------------------"
                          echo "Invalid choice, please enter Yes or No"
                          echo "--------------------------------------"
                          echo "--------------------------------------"
                          echo ""
                        ;;    
                    esac
                    done
                    break
                    ;;                     
            "Run LND" )
              runLnd
              askUserForBitcoinProgramToInstallOrRun
              ;;           
            "LND CLI Commands" )
              while true; do
                echo ""
                read -r -p "Confirm you want to open $USERGIVENPROGRAMRUNINSTALL on Bitcoin's "$USERGIVENNETWORKCHOICE" network: Yes or No: `echo $'\n> '`" USERGIVENPROGRAMRUNINSTALLANSWER
                    case $USERGIVENPROGRAMRUNINSTALLANSWER in
                        [yY][eE][sS]|[yY] )
                          lndCommandlineInterfaceMainMenu
                          break
                        ;;
                        [nN][oO]|[nN] )
                          echo ""
                          askUserForBitcoinProgramToInstallOrRun
                          break  
                        ;;
                        * ) 
                          echo ""
                          echo "--------------------------------------"
                          echo "--------------------------------------"
                          echo "Invalid choice, please enter Yes or No"
                          echo "--------------------------------------"
                          echo "--------------------------------------"
                          echo ""
                        ;;    
                    esac
                    done
                    break
                    ;;
            "Run Bitcoind & LND" )
              while true; do
                echo ""  
                read -r -p "Confirm you want to $USERGIVENPROGRAMRUNINSTALL on Bitcoin's "$USERGIVENNETWORKCHOICE" network: Yes or No: `echo $'\n> '`" USERGIVENPROGRAMRUNINSTALLANSWER
                    case $USERGIVENPROGRAMRUNINSTALLANSWER in
                        [yY][eE][sS]|[yY] )
                          echo ""
                          startRunningBitcoinCoreOptions
                          runLnd
                          askUserForBitcoinProgramToInstallOrRun                          
                        ;;
                        [nN][oO]|[nN] )
                          echo "" 
                          askUserForBitcoinProgramToInstallOrRun                          
                        ;;
                        * ) 
                          echo ""
                          echo "--------------------------------------"
                          echo "--------------------------------------"
                          echo "Invalid choice, please enter Yes or No"
                          echo "--------------------------------------"
                          echo "--------------------------------------"
                          echo ""
                        ;;    
                    esac
                    done
                    break
                    ;;
            "Install & Run Bitcoind & LND" )
              while true; do
                echo ""  
                read -r -p "Confirm you want to $USERGIVENPROGRAMRUNINSTALL on Bitcoin's "$USERGIVENNETWORKCHOICE" network: Yes or No: `echo $'\n> '`" USERGIVENPROGRAMRUNINSTALLANSWER
                    case $USERGIVENPROGRAMRUNINSTALLANSWER in
                        [yY][eE][sS]|[yY] )
                          echo ""
                          bitcoinInstallFunction
                          installLnd
                          startRunningBitcoinCoreOptions
                          runLnd
                          askUserForBitcoinProgramToInstallOrRun                        
                        ;;
                        [nN][oO]|[nN] ) 
                          echo "" 
                          askUserForBitcoinProgramToInstallOrRun  
                        ;;
                        * ) 
                          echo ""
                          echo "--------------------------------------"
                          echo "--------------------------------------"
                          echo "Invalid choice, please enter Yes or No"
                          echo "--------------------------------------"
                          echo "--------------------------------------"
                          echo ""
                        ;;    
                    esac
                    done
                    break
                    ;;
            "Change Bitcoin Network" )
              while true; do
                echo ""  
                read -r -p "Confirm you want to $USERGIVENPROGRAMRUNINSTALL from Bitcoin's "$USERGIVENNETWORKCHOICE" network: Yes or No: `echo $'\n> '`" USERGIVENPROGRAMRUNINSTALLANSWER
                    case $USERGIVENPROGRAMRUNINSTALLANSWER in
                        [yY][eE][sS]|[yY] )
                          echo "Resting Bitcoin Network Selection"
                          askUserForNetwork
                          askUserForBitcoinDataDir
                          askUserForBitcoinProgramToInstallOrRun
                          break
                        ;;
                        [nN][oO]|[nN] ) 
                          echo ""
                          askUserForBitcoinProgramToInstallOrRun
                          break
                        ;;
                        * ) 
                          echo ""
                          echo "--------------------------------------"
                          echo "--------------------------------------"
                          echo "Invalid choice, please enter Yes or No"
                          echo "--------------------------------------"
                          echo "--------------------------------------"
                          echo ""
                        ;;    
                    esac
                    done
                    break
                    ;;
            "Quit The Bitcoin Core Installer" )
              while true; do
                echo ""  
                read -r -p "Confirm you want to $USERGIVENPROGRAMRUNINSTALL : Yes or No: `echo $'\n> '`" USERGIVENPROGRAMRUNINSTALLANSWER
                    case $USERGIVENPROGRAMRUNINSTALLANSWER in
                        [yY][eE][sS]|[yY] )
                          echo "------------------------------------------------"
                          echo "------------------------------------------------"
                          echo "------------------------------------------------"
                          echo "Exiting Bitcoin Core and Lightning LND Installer"
                          echo "------------------------------------------------"
                          echo "------------------------------------------------"
                          echo "------------------------------------------------"
                          exit
                          sleep 1.5
                          break
                        ;;
                        [nN][oO]|[nN] )
                          echo "" 
                          askUserForBitcoinProgramToInstallOrRun    
                        ;;
                        * ) 
                          echo ""
                          echo "--------------------------------------"
                          echo "--------------------------------------"
                          echo "Invalid choice, please enter Yes or No"
                          echo "--------------------------------------"
                          echo "--------------------------------------"
                          echo ""
                        ;;    
                    esac
                    done
                    break
                    ;;                                                                                           
            "*" ) 
                echo ""
                echo "-------------------------------------------------"
                echo "-------------------------------------------------"
                echo "Invalid choice, please choose from the list above"
                echo "-------------------------------------------------"
                echo "-------------------------------------------------"
              ;;    
      esac
      done
      }
# - Step 4:
startRunningBitcoinCoreOptions () {
    echo "-----------------------------------------------------------------------------------------------"
    echo "Step 4: Please choose bitcoin-qt for the GUI version or bitcoind for the command line interface"
    echo "-----------------------------------------------------------------------------------------------"

    select USERGIVENBITCOINPROGRAM in bitcoind bitcoin-qt Exit
    do    
        case $USERGIVENBITCOINPROGRAM in
            bitcoind )
                if [ "$USERGIVENPROGRAMRUNINSTALL" == "Install Bitcoin" ]
                then 
                    # - Running bitcoind with increase database cache for optimal speed during the IBD
                    echo "--------------------------------------------------------------------------------------------------------------------"
                    read -r -p "Please enter in megabytes, 3500 = 3.5 gigabytes, the max RAM you want to allow for IBD (the higher the better): `echo $'\n> '`" USERGIVENMAXRAM 
                    echo "bdcache="$USERGIVENMAXRAM"" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
                    writeBitcoinConfFileDependingOnUserGivenDataDir        
                    writeBitcoinDataDirectoryConfFileDependingOnUserGivenDataDir
                    gnome-terminal --title Bitcoind_"$USERGIVENNETWORKCHOICE" --tab -- bitcoind
                    echo "------------------------------------------------------------------------------------------------------------------"   
                    echo "Success, bitcoind is running on the "$USERGIVENNETWORKCHOICE" network. Optimising bitcoind IBD database for fastest download"
                    echo "------------------------------------------------------------------------------------------------------------------"
                    echo "------------------------------------------------------------------------------------------------------------------"
                    askUserForBitcoinProgramToInstallOrRun
                else 
                    # - Running bitcoind because the IDB has already been completed based on USERGIVENPROGRAMRUNINSTALL
                    writeBitcoinConfFileDependingOnUserGivenDataDir        
                    writeBitcoinDataDirectoryConfFileDependingOnUserGivenDataDir
                    gnome-terminal --title Bitcoind_"$USERGIVENNETWORKCHOICE" --tab -- bitcoind
                    echo "------------------------------------------------------------------------------------------------------------------"   
                    echo "Success, bitcoind is running on the "$USERGIVENNETWORKCHOICE" network. Optimising bitcoind IBD database for fastest download"
                    echo "------------------------------------------------------------------------------------------------------------------"
                    askUserForBitcoinProgramToInstallOrRun
                fi
                ;;
            bitcoin-qt )
                if [ "$USERGIVENINSTALLRUNBITCOIN" == "Install Bitcoin" ]
                then 
                    # - Running bitcoin-qt with increase database cache for optimal speed during the IBD
                    echo "--------------------------------------------------------------------------------------------------------------------"
                    read -r -p "Please enter in megabytes, 3500 = 3.5 gigabytes, the max RAM you want to allow for IBD (the higher the better): `echo $'\n> '`" USERGIVENMAXRAM
                    echo "bdcache="$USERGIVENMAXRAM"" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf 
                    writeBitcoinConfFileDependingOnUserGivenDataDir        
                    writeBitcoinDataDirectoryConfFileDependingOnUserGivenDataDir
                    gnome-terminal --title Bitcoind_"$USERGIVENNETWORKCHOICE" --tab -- bitcoin-qt
                    echo "------------------------------------------------------------------------------------------------------------------"   
                    echo "Success, bitcoind is running on the "$USERGIVENNETWORKCHOICE" network. Optimising bitcoind IBD database for fastest download"
                    echo "------------------------------------------------------------------------------------------------------------------"
                    echo "------------------------------------------------------------------------------------------------------------------"
                    askUserForBitcoinProgramToInstallOrRun
                else             
                    # - Running bitcoin-qt because the IDB has already been completed based on USERGIVENPROGRAMRUNINSTALL
                    writeBitcoinConfFileDependingOnUserGivenDataDir
                    writeBitcoinDataDirectoryConfFileDependingOnUserGivenDataDir
                    gnome-terminal --title Bitcoind_"$USERGIVENNETWORKCHOICE" --tab -- bitcoin-qt  
                    echo "-----------------------------------------------------------------------------------------"   
                    echo "Success, bitcoin-qt is running on the "$USERGIVENNETWORKCHOICE" network."
                    echo "-----------------------------------------------------------------------------------------"
                    askUserForBitcoinProgramToInstallOrRun
                fi
                ;;
            Exit )
                exit
                ;;
            * ) 
                echo "--------------"
                echo "Invalid choice, enter either bitcoind or bitcoin-qt"
                startRunningBitcoinCoreOptions
                ;;
        esac
        done
    }

# - Step 4.1                       
installBitcoinCoreDependencies () {
  echo "---------------------------------------------------------------"
  echo "Step 4.1: Download and install the dependencies for Bitcoin Core"
  echo "---------------------------------------------------------------"
  sudo apt-get update && upgrade
  sudo apt-get install -y build-essential libtool autotools-dev automake pkg-config bsdmainutils python3
  sudo apt-get install -y libssl-dev libevent-dev libboost-system-dev libboost-filesystem-dev
  sudo apt-get install -y libboost-chrono-dev libboost-test-dev libboost-thread-dev
  sudo apt-get install -y libboost-all-dev
  sudo apt-get install -y libminiupnpc-dev
  sudo apt-get install -y libzmq3-dev
  sudo apt-get install -y libqrencode-dev
  sudo apt-get install -y software-properties-common
  sudo add-apt-repository -y ppa:bitcoin/bitcoin
  sudo apt-get install -y libzmq3-dev
  sudo apt install -y curl
  sudo apt-get update
  sleep .15
  }

# - Step 4.2: Download and install Bitcoin-qt dependencies and required packages for Qt development, the GUI version of core
installBitcoinCoreQtDependencies () {
  echo "---------------------------------------------------------------"
  echo "Step 4.2: Download and install the dependencies for Bitcoin QT"
  echo "---------------------------------------------------------------"
  sudo apt-get install -y libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler
  sleep .15
  } 

# - Steo 4.3: Download and install Git
installGit () {
  echo "---------------------------------------------------------------"
  echo "Step 4.3: Download and install Git"
  echo "---------------------------------------------------------------"
  sudo apt-get -y install git
  sleep .15
  }

# - Step 4.4: Create a folder in the users $HOME directory and clone the Bitcoin repository from GitHub
makeBitcoinDir () {
  echo "---------------------------------------------------------------------------------------------------"
  echo "Step 4.4: Create a folder in the home directory, and clone the Bitcoin repository from GitHub to it"
  echo "---------------------------------------------------------------------------------------------------"
      cd $HOME
      mkdir -p bitcoin-source && cd bitcoin-source  
      sleep .5
      git clone https://github.com/bitcoin/bitcoin.git
      sleep .15
  }
  
# - Step 4.5: Extract, build, verify hash, and THEN install the Berkeley Database
verifyAndInstallBerkley () {
  echo "----------------------------------------------"
  echo "Step 4.5: Download and install Berkley Database"
  echo "----------------------------------------------"
  wget http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz -P ~/bitcoin-source
  BERKLEYCHECKSUMOK=$(echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef  db-4.8.30.NC.tar.gz' | sha256sum -c)
      if [ "$BERKLEYCHECKSUMOK" == "db-4.8.30.NC.tar.gz: OK" ]
      then
          tar -xvf db-4.8.30.NC.tar.gz
          cd db-4.8.30.NC/build_unix
          mkdir -p build
          BDB_PREFIX=$(pwd)/build
          ../dist/configure --disable-shared --enable-cxx --with-pic --prefix=$BDB_PREFIX
          sudo make install
      else
          echo "The install had to exit due to an incorrect hash, this was done for the integrity of your computer"
      fi
  sleep .15
  } 
# - Step 4.7: Installs Bitcoin Core and Bitcoin CLI
installBitcoinCore () {
  echo "------------------------------"
  echo "Step 4.7: Install Bitcoin Core"
  echo "------------------------------"
  cd $HOME
  cd bitcoin-source
  cd bitcoin
  sudo git checkout tags/v0.17.1  #(this is for version v0.17.1)
  sudo ./autogen.sh
  sudo ./configure CPPFLAGS="-I${BDB_PREFIX}/include/ -O2" LDFLAGS="-L${BDB_PREFIX}/lib/" --with-gui
  sudo make
  sudo make install
  echo "-------------------------------------------" 
  echo "Bitcoin core has been installed succesfully"
  echo "-------------------------------------------"
  sleep .25
  }  
# - Steps 4.8 & 4.9: Write the .bitcoin/bitcoin.conf config file in the HOME directory && write the bitcoin.conf file in the corresponding data directory choosen by the user
writeBitcoinConfFileDependingOnUserGivenDataDir () {
  # .bitcoin bitcoin.conf write
  echo "-------------------------------------------------------------------------"
  echo "Step 4.8: Write the config file for Bitcoin in the hidden .bitcoin folder"
  echo "-------------------------------------------------------------------------"
  cd $HOME
  mkdir ~/.bitcoin
  cd ~/.bitcoin
  touch bitcoinscriptdata.txt
  sed -i '1,350d' ~/.bitcoin/bitcoinscriptdata.txt
  echo "$USERGIVENINSTALLRUNBITCOIN" >> ~/.bitcoin/bitcoinscriptdata.txt
  echo "$USERGIVENNETWORKCHOICE" >> ~/.bitcoin/bitcoinscriptdata.txt
  echo "$USERGIVENBITCOINDATADIR" >> ~/.bitcoin/bitcoinscriptdata.txt
  touch debug.log
  touch bitcoin.conf
  sed -i '1,350d' ~/.bitcoin/bitcoin.conf
  echo "debug=net" >> ~/.bitcoin/bitcoin.conf
  echo "rpcuser=rpcuser" >> ~/.bitcoin/bitcoin.conf
  echo "rpcpassword=password" >> ~/.bitcoin/bitcoin.conf
  echo "txindex=1" >> ~/.bitcoin/bitcoin.conf
  echo "log-level=debug" >> ~/.bitcoin/bitcoin.conf
  #echo "datadir="$USERGIVENBITCOINDATADIR"" >> ~/.bitcoin/bitcoin.conf
  echo "server=1" >> ~/.bitcoin/bitcoin.conf
  #echo "daemon=1" >> ~/.bitcoin/bitcoin.conf
  echo "zmqpubrawblock=tcp://127.0.0.1:28332" >> ~/.bitcoin/bitcoin.conf
  echo "zmqpubrawtx=tcp://127.0.0.1:28333" >> ~/.bitcoin/bitcoin.conf
  echo "export PATH=$PATH:~/bitcoin-source/bitcoin/scr" >> ~/.bashrc      
  }
# - Check to see if user has a defined data directory or is using default
writeBitcoinDataDirectoryConfFileDependingOnUserGivenDataDir () {
  
      if  [ "$USERGIVENNETWORKCHOICE" == "Mainnet" ] && [ "$USERGIVENBITCOINDATADIR" == "default" ]
      then 
          echo "mainnet=1" >> ~/.bitcoin/bitcoin.conf
          source ~/.bashrc
      elif [ "$USERGIVENNETWORKCHOICE" == "Mainnet" ] && [ "$USERGIVENBITCOINDATADIR" == "default" ]
      then
          echo "testnet=1" >> ~/.bitcoin/bitcoin.conf
          source ~/.bashrc
      elif [ "$USERGIVENNETWORKCHOICE" == "Mainnet" ] && [ "$USERGIVENBITCOINDATADIR" != "default" ]
      then
          # Mainnet bitcoin.conf write8
          echo "--------------------------------------------------"
          echo "Step 4.9: Write the config file for Bitcoin mainnet"
          echo "--------------------------------------------------"
          touch "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          sed -i '1,35d' "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "debug=net" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "rpcuser=rpcuser" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "rpcpassword=password" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "datadir="$USERGIVENBITCOINDATADIR"" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "mainnet=1" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "mainnet=1" >> ~/.bitcoin/bitcoin.conf
          echo "txindex=1" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "log-level=debug" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          #echo "daemon=1" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "datadir="$USERGIVENBITCOINDATADIR"" >> ~/.bitcoin/bitcoin.conf
          echo "server=1" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "zmqpubrawblock=tcp://127.0.0.1:28332" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "zmqpubrawtx=tcp://127.0.0.1:28333" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "Confirming Bitcoin.conf file setup for Mainnet"
          source ~/.bashrc
      elif [ "$USERGIVENNETWORKCHOICE" == "Testnet" ] && [ "$USERGIVENBITCOINDATADIR" != "default" ]
      then
          # Testnet bitcoin.conf write
          echo "--------------------------------------------------"
          echo "Step 4.9: Write the config file for Bitcoin testnet"
          echo "--------------------------------------------------"
          touch "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          sed -i '1,35d' "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "debug=net" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "rpcuser=rpcuser" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "rpcpassword=password" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "testnet=1" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "testnet=1" >> ~/.bitcoin/bitcoin.conf
          echo "datadir=$USERGIVENBITCOINDATADIR" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "txindex=1" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "log-level=debug" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          #echo "daemon=1" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "datadir="$USERGIVENBITCOINDATADIR"" >> ~/.bitcoin/bitcoin.conf
          echo "server=1" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "zmqpubrawblock=tcp://127.0.0.1:28332" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "zmqpubrawtx=tcp://127.0.0.1:28333" >> "$USERGIVENBITCOINDATADIR"/bitcoin.conf
          echo "Confirming Bitcoin.conf file setup for Testnet"
          source ~/.bashrc
      else 
      echo "" 
      fi 
  } 
  

# - Install Bitcoin Core
bitcoinInstallFunction() {
  installBitcoinCoreDependencies 
  installBitcoinCoreQtDependencies
  installGit 
  makeBitcoinDir 
  verifyAndInstallBerkley 
  installBitcoinCore 
  writeBitcoinConfFileDependingOnUserGivenDataDir
  writeBitcoinDataDirectoryConfFileDependingOnUserGivenDataDir
  startRunningBitcoinCoreOptions
  }
# - Function for not yet programed 
notYetWorking () {
  echo ""  
  echo "This part hasn't been added to the script yet, reseting your choice"
  echo ""
  askUserForBitcoinProgramToInstallOrRun
  }
# - Installs LND and all preliminaries   
installLnd () {
  read -r -p "You have choosen to install LND, is this correct? Enter Yes or No: `echo $'\n> '`" USERGIVENINSTALLLNDCORRECT
    case $USERGIVENINSTALLLNDCORRECT in
      [yY][eE][sS]|[yY] ) 
        echo "----------------------------------------------------------"
        echo "LND - Step 1: Installing Lightning (LND) and preliminaries"
        echo "----------------------------------------------------------"
        # - Install Go version 1.11 and verify the repo hasnn't been modified
        sudo add-apt-repository ppa:longsleep/golang-backports -y
        sudo apt-get update -y
        sudo apt-get -y upgrade
        # - Download and install Go version 1.11 and verify the repo hasnn't been modified
        wget https://dl.google.com/go/go1.11.4.linux-amd64.tar.gz
        GODOWNLOADSAFE=$(sha256sum go1.11.4.linux-amd64.tar.gz | awk -F " " '{ print $1 }')
        sleep 1
          if [ "$GODOWNLOADSAFE" == 'fb26c30e6a04ad937bbc657a1b5bba92f80096af1e8ee6da6430c045a8db3a5b' ] 
          then 
              sudo tar -C /usr/local -xzf go1.11.4.linux-amd64.tar.gz
              export PATH=$PATH:/usr/local/go/bin
          else
              echo "The Go repo has been modified and this install as stopped for your saftey"
              sleep 1
              exit
          fi
        # - GOPATH environment variable set with edit in .bashrc file; represents the path to your workspace
        export GOPATH=~/gocode 
        export PATH=$PATH:$GOPATH/bin
        # - Install LND UPDATED for the newest version
        go get -d github.com/lightningnetwork/lnd
        cd $GOPATH/src/github.com/lightningnetwork/lnd
        make && make install
        cd $GOPATH/src/github.com/lightningnetwork/lnd
        git pull
        make clean && make install                     
        writeLndConfFile
        echo "-------------------------"
        echo "LND - Step 2: Testing LND"
        echo "-------------------------"
        testLnd
        ;;    
    [nN][oO]|[nN] ) 
        askUserForBitcoinProgramToInstallOrRun
        ;;
    * ) 
        echo ""
        echo "--------------------------------------"
        echo "--------------------------------------" 
        echo "Invalid choice, please enter Yes or No"
        echo "--------------------------------------"
        echo "--------------------------------------"
        echo ""
        ;;   
    esac
  }          

# - Tests the LND installation   
testLnd () {
  read -r -p "Confirm you want to $USERGIVENPROGRAMRUNINSTALL on Bitcoin's "$USERGIVENNETWORKCHOICE" network: Yes or No: `echo $'\n> '`" USERGIVENPROGRAMRUNINSTALLANSWER
  case $USERGIVENPROGRAMRUNINSTALLANSWER in
    [yY][eE][sS]|[yY] )
      echo "---------------------------------------------------------------"
      echo "Testing your LND installation, this will take about 20 minutes "
      echo "---------------------------------------------------------------"
      cd $GOPATH/src/github.com/lightningnetwork/lnd
      make check
      askUserForBitcoinProgramToInstallOrRun
      ;;
    [nN][oO]|[nN] ) 
      askUserForBitcoinProgramToInstallOrRun
      ;;
    * ) echo "Invalid choice, please enter Yes or No"
        echo "--------------------------------------"
        echo "--------------------------------------"
        ;; 
    esac
    }
# - Run LND     
runLnd () {
  read -r -p "Confirm you want to $USERGIVENPROGRAMRUNINSTALL on Bitcoin's "$USERGIVENNETWORKCHOICE" network: Yes or No: `echo $'\n> '`" USERGIVENPROGRAMRUNINSTALLANSWER
  case $USERGIVENPROGRAMRUNINSTALLANSWER in
    [yY][eE][sS]|[yY] )
        writeLndConfFile
        source ~/.bashrc
        askUserForNetwork
        gnome-terminal --title LND_"$USERGIVENNETWORKCHOICE" --tab -- lnd
        askUserForBitcoinProgramToInstallOrRun 
        ;;
    [nN][oO]|[nN] ) 
        askUserForBitcoinProgramToInstallOrRun
        ;;
    * ) echo ""
        echo "--------------------------------------"
        echo "--------------------------------------" 
        echo "Invalid choice, please enter Yes or No"
        echo "--------------------------------------"
        echo "--------------------------------------"
        echo ""
        ;;   
    esac
  } 



lndCommandlineInterfaceMainMenu () {
    echo "------------------------------------------------------------------------------------"
    echo "LND / CLI - Choose the LND CLI command you want to run on Bitcoin's "$USERGIVENNETWORKCHOICE" network:"
    echo "------------------------------------------------------------------------------------"
      select USERGIVENPROGRAMRUNINSTALL in "Startup" "Wallet" "Peers" "Payments" "On-chain" "Channels" "Exit Back to Main Menu"
      do
            case $USERGIVENPROGRAMRUNINSTALL in
            "Startup" )
            echo "---------------------------"
            echo "LND / CLI - Startup options"
            echo "---------------------------"
              select STARTUPMENU in "Create" "Unlock" "Change Password" "Exit Back to LND Main Menu" 
              do
                  case $STARTUPMENU in
                  "Create" )
                    createNewLNDWalet
                    lndCommandlineInterfaceMainMenu
                    ;;
                  "Unlock" )
                    unlockLNDWalet
                    lndCommandlineInterfaceMainMenu
                    ;;
                  "Change Password" )
                    changePassword
                    lndCommandlineInterfaceMainMenu
                    ;;
                  "Exit Back to LND Main Menu" )
                    lndCommandlineInterfaceMainMenu  
                    ;;
                   "*" ) 
                    echo ""
                    echo "-------------------------------------------------"
                    echo "-------------------------------------------------"
                    echo "Invalid choice, please choose from the list above"
                    echo "-------------------------------------------------"
                    echo "-------------------------------------------------"
                    ;;        
                  esac
                  done
                  ;;           
            "Wallet" )
            echo "---------------------------"
            echo "LND / CLI - Wallet options"
            echo "---------------------------"
              select WALLETMENU in "New Address" "Wallet Balance" "Sign Message" "Verify Message" "Exit Back to LND Main Menu"
              do
                  case $WALLETMENU in
                  "New Address" )
                    newAddress                     
                    lndCommandlineInterfaceMainMenu
                    ;;
                  "Wallet Balance" )
                    walletBallance
                    lndCommandlineInterfaceMainMenu
                    ;;
                  "Sign Message" )
                    echo "Current not programmed yet"
                    sleep 1.5
                    lndCommandlineInterfaceMainMenu
                    ;;
                  "Verify Message" )
                    echo "Currently not programmed yet"
                    sleep1.5
                    ;; 
                  "Exit Back to LND Main Menu" )
                    lndCommandlineInterfaceMainMenu  
                    ;; 
                   "*" ) 
                    echo ""
                    echo "-------------------------------------------------"
                    echo "-------------------------------------------------"
                    echo "Invalid choice, please choose from the list above"
                    echo "-------------------------------------------------"
                    echo "-------------------------------------------------"
                    ;;        
                  esac
                  done
                  ;;           
            "Peers" )
              echo "------------------------"
              echo "LND / CLI - Peer options"
              echo "------------------------"
              select PEERSMENU in "Connect" "Disconnect" "List Peers" "Describe Network" "Get Node Information" "Exit Back to LND Main Menu"
              do
                  case $PEERSMENU in
                  "Connect" )
                    checkLNDNetwork
                    connectPeer
                    lndCommandlineInterfaceMainMenu
                    ;;
                  "Disconnect" )
                    checkLNDNetwork
                    disconnectFromPeer
                    lndCommandlineInterfaceMainMenu
                    ;;
                  "List Peers" )
                    checkLNDNetwork
                    listPeers
                    lndCommandlineInterfaceMainMenu
                    ;;
                  "Get Node Information" )
                    checkLNDNetwork
                    getNodeInfo
                    lndCommandlineInterfaceMainMenu
                    ;;
                  "Describe Network" )
                    checkLNDNetwork
                    describeGraph
                    lndCommandlineInterfaceMainMenu  
                    ;; 
                  "Exit Back to LND Main Menu" )
                    lndCommandlineInterfaceMainMenu  
                    ;; 
                   "*" ) 
                    echo ""
                    echo "-------------------------------------------------"
                    echo "-------------------------------------------------"
                    echo "Invalid choice, please choose from the list above"
                    echo "-------------------------------------------------"
                    echo "-------------------------------------------------"
                    ;;        
                  esac
                  done
                  ;;           
            "Payments" )
              echo "---------------------------"
              echo "LND / CLI - Payment options"
              echo "---------------------------"
                select STARTUPMENU in "Create" "Unlock" "Change Password" "Exit Back to LND Main Menu" 
                do
                  case $STARTUPMENU in
                  "Create" )
                    checkLNDNetwork
                    createNewLNDWalet
                    lndCommandlineInterfaceMainMenu
                    ;;
                  "Unlock" )
                    checkLNDNetwork
                    unlockLNDWalet
                    lndCommandlineInterfaceMainMenu
                    ;;
                  "Change Password" )
                    checkLNDNetwork
                    changePassword
                    lndCommandlineInterfaceMainMenu
                    ;;
                   "*" ) 
                    echo ""
                    echo "-------------------------------------------------"
                    echo "-------------------------------------------------"
                    echo "Invalid choice, please choose from the list above"
                    echo "-------------------------------------------------"
                    echo "-------------------------------------------------"
                  ;;        
                  esac
                  done
                  ;;
            "Exit Back to Main Menu" )
              askUserForBitcoinProgramToInstallOrRun
              ;;    
            "*" ) 
                echo ""
                echo "-------------------------------------------------"
                echo "-------------------------------------------------"
                echo "Invalid choice, please choose from the list above"
                echo "-------------------------------------------------"
                echo "-------------------------------------------------"
              ;;        
          esac
          done
          }
checkLNDNetwork () {
  if [ "$USERGIVENNETWORKCHOICE" == "Mainnet" ]
  then 
    LNCLINETWORK=mainnet
  else 
    LNCLINETWORK=testnet
  fi
  }
createNewLNDWalet () {
  checkLNDNetwork
  echo "Initialize a wallet when starting lnd for the first time"
  read -r -p "Confirm you want to Create a New LND wallet while on Bitcoin's "$USERGIVENNETWORKCHOICE" network: Yes or No: `echo $'\n> '`" USERGIVENPROGRAMRUNINSTALLANSWER
  case $USERGIVENPROGRAMRUNINSTALLANSWER in
      [yY][eE][sS]|[yY] )
        lncli --network="$LNCLINETWORK" create
        
      ;;
      [nN][oO]|[nN] ) 
        echo ""
        lndCommandlineInterfaceMainMenu
      ;;
      * ) 
        echo ""
        echo "--------------------------------------"
        echo "--------------------------------------"
        echo "Invalid choice, please enter Yes or No"
        echo "--------------------------------------"
        echo "--------------------------------------"
        echo ""
        ;;    
    esac
    }


unlockLNDWalet () {
  checkLNDNetwork
  echo "Unlock an encrypted wallet at startup"
  read -r -p "Confirm you want to Unlock your LND wallet while on Bitcoin's "$USERGIVENNETWORKCHOICE" network: Yes or No: `echo $'\n> '`" USERGIVENPROGRAMRUNINSTALLANSWER
  case $USERGIVENPROGRAMRUNINSTALLANSWER in
      [yY][eE][sS]|[yY] )
        lncli --network="$LNCLINETWORK" unlock
        lndCommandlineInterfaceMainMenu
      ;;
      [nN][oO]|[nN] ) 
        echo ""
        lndCommandlineInterfaceMainMenu
      ;;
      * ) 
        echo ""
        echo "--------------------------------------"
        echo "--------------------------------------"
        echo "Invalid choice, please enter Yes or No"
        echo "--------------------------------------"
        echo "--------------------------------------"
        echo ""
        ;;    
  esac
  }

changePassword () {
  checkLNDNetwork
  echo "Change an encrypted wallet's password at startup"
  read -r -p "Confirm you want to change your password to your LND wallet on Bitcoin's "$USERGIVENNETWORKCHOICE" network: Yes or No: `echo $'\n> '`" USERGIVENPROGRAMRUNINSTALLANSWER
  case $USERGIVENPROGRAMRUNINSTALLANSWER in
      [yY][eE][sS]|[yY] )
        lncli --network="$LNCLINETWORK" changepassword
        lndCommandlineInterfaceMainMenu
      ;;
      [nN][oO]|[nN] ) 
        echo ""
        lndCommandlineInterfaceMainMenu
      ;;
      * ) 
        echo ""
        echo "--------------------------------------"
        echo "--------------------------------------"
        echo "Invalid choice, please enter Yes or No"
        echo "--------------------------------------"
        echo "--------------------------------------"
        echo ""
        ;;    
  esac
  }
newAddress () {
  checkLNDNetwork
  echo "Generates a new address"
  read -r -p "Confirm you want to create a new LND wallet address while on Bitcoin's "$USERGIVENNETWORKCHOICE" network: Yes or No: `echo $'\n> '`" USERGIVENPROGRAMRUNINSTALLANSWER
  case $USERGIVENPROGRAMRUNINSTALLANSWER in
      [yY][eE][sS]|[yY] )
        lncli --network="$LNCLINETWORK" newaddress p2wkh
        lndCommandlineInterfaceMainMenu
      ;;
      [nN][oO]|[nN] ) 
        echo ""
        lndCommandlineInterfaceMainMenu
      ;;
      * ) 
        echo ""
        echo "--------------------------------------"
        echo "--------------------------------------"
        echo "Invalid choice, please enter Yes or No"
        echo "--------------------------------------"
        echo "--------------------------------------"
        echo ""
        ;;    
  esac
  }
walletBallance () {
  checkLNDNetwork
  echo "Compute and display the wallet's current balance"
  read -r -p "Confirm you want to Display Your Wallets Balance while on Bitcoin's "$USERGIVENNETWORKCHOICE" network: Yes or No: `echo $'\n> '`" USERGIVENPROGRAMRUNINSTALLANSWER
  case $USERGIVENPROGRAMRUNINSTALLANSWER in
      [yY][eE][sS]|[yY] )
        lncli --network="$LNCLINETWORK" walletbalance
        lndCommandlineInterfaceMainMenu
      ;;
      [nN][oO]|[nN] ) 
        echo ""
        lndCommandlineInterfaceMainMenu
      ;;
      * ) 
        echo ""
        echo "--------------------------------------"
        echo "--------------------------------------"
        echo "Invalid choice, please enter Yes or No"
        echo "--------------------------------------"
        echo "--------------------------------------"
        echo ""
        ;;    
  esac
  }
connectPeer () {
      checkLNDNetwork
      echo "Connect to a remote lnd peer"
      read -r -p "Paste the URI of the peer you want to disconnect with: `echo $'\n> '`" PUBKEYPEERCONNECT
      echo PUBKEYPEERCONNECT
      lncli --network="$LNCLINETWORK" connect "$PUBKEYPEERCONNECT"
      lndCommandlineInterfaceMainMenu
      #02a68237add204623021d09b0334c4992c132eb3c9dcfcb8f3cf8a57386775538e@18.205.95.237:9735
      lndCommandlineInterfaceMainMenu
      } 
disconnectFromPeer () {
  checkLNDNetwork
  echo "Disconnect a remote lnd peer identified by public key"
  read -r -p "Confirm you want to Disconnect a Peer while on Bitcoin's "$USERGIVENNETWORKCHOICE" network: Yes or No: `echo $'\n> '`" USERGIVENPROGRAMRUNINSTALLANSWER
  case $USERGIVENPROGRAMRUNINSTALLANSWER in
      [yY][eE][sS]|[yY] )
        read -r -p "Paste the Public Key of the peer you want to disconnect with: `echo $'\n> '`" PUBKEYPEERDISCONNECT
        lncli --network="$LNCLINETWORK" disconnect "$PUBKEYPEERDISCONNECT"
        lndCommandlineInterfaceMainMenu
      ;;
      [nN][oO]|[nN] ) 
        echo ""
        lndCommandlineInterfaceMainMenu
      ;;
      * ) 
        echo ""
        echo "--------------------------------------"
        echo "--------------------------------------"
        echo "Invalid choice, please enter Yes or No"
        echo "--------------------------------------"
        echo "--------------------------------------"
        echo ""
        ;;    
  esac
  } 
listPeers () {
  checkLNDNetwork
  echo "List all active, currently connected peers"
  lncli --network="$LNCLINETWORK" listpeers
  sleep .5
  }   
describeGraph () {
  checkLNDNetwork
  echo "Describe the network graph"
  lncli --network="$LNCLINETWORK" describegraph
  sleep .5
  }    
getNodeInfo () {
  checkLNDNetwork
  echo "Returns basic information related to the active daemon"
  lncli --network="$LNCLINETWORK" getinfo
  sleep .5
  }
openChannel () {
  checkLNDNetwork
  echo "Open a channel to a node or an existing peer"
  read -r -p "Paste the Public Key of the peer you want to disconnect with: `echo $'\n> '`" PUBKEYPEERDISCONNECT
  lncli --network="$LNCLINETWORK" openchannel "$PUBKEYPEERDISCONNECT"
  lndCommandlineInterfaceMainMenu
  }  
closeChannel () {
  echo "Not yet programmed"
  lndCommandlineInterfaceMainMenu
  }
closeAllChannels () {
  checkLNDNetwork
  echo "Close all existing channels"
  lncli --network="$LNCLINETWORK" closeallchannels  
  lndCommandlineInterfaceMainMenu
  }
abandonChannel () {
  echo "Not yet programmed"
  lndCommandlineInterfaceMainMenu
  }
listChannels () {
  checkLNDNetwork
  echo "List all open channels"
  lncli --network="$LNCLINETWORK" listchannels
  lndCommandlineInterfaceMainMenu
  }
closedChannels () {
  checkLNDNetwork
  echo "List all closed channels"
  lncli --network="$LNCLINETWORK" closedchannels 
  lndCommandlineInterfaceMainMenu
  }
getChanInfo () {
  checkLNDNetwork
  echo "Get the state of a channel"
  read -r -p "Paste the Channel ID of the channel you want info from: `echo $'\n> '`" GETCHANINFOID
  lncli --network="$LNCLINETWORK" getchaninfo "$GETCHANINFOID"
  lndCommandlineInterfaceMainMenu
getNetworkInfo () {
  checkLNDNetwork
  echo "Get statistical information about the current state of the network"
  lncli --network="$LNCLINETWORK" getnetworkinfo
  lndCommandlineInterfaceMainMenu
  }
feeReport () {
  checkLNDNetwork
  echo "Display the current fee policies of all active channels"
  lncli --network="$LNCLINETWORK" feereport
  lndCommandlineInterfaceMainMenu
  }
updateChanPolicy () {
  echo "This hasn't been programmand in yet"
  lndCommandlineInterfaceMainMenu
  }
sendMany () {
  echo "This hasn't been programmand in yet"
  lndCommandlineInterfaceMainMenu
  }
sendCoins () {
  checkLNDNetwork
  echo "Send bitcoin on-chain to an address"
  sleep .25
  read -r -p "Paste the address of the wallet you want to send, on chain, coins to: `echo $'\n> '`" SENDCOINSADDRESS
  read -r -p "Paste the address of the wallet you want to send, on chain, coins to: `echo $'\n> '`" SENDCOINSAMOUNT
  lncli --network="$LNCLINETWORK" sendcoins "$SENDCOINSADDRESS" "$SENDCOINSAMOUNT"
  sleep .25
  lndCommandlineInterfaceMainMenu
  }
listUnspent () {
  checkLNDNetwork
  echo "Open a channel to a node or an existing peer"
  #read -r -p "Paste the Public Key of the peer you want to disconnect with: `echo $'\n> '`" PUBKEYPEERDISCONNECT
  lncli --network="$LNCLINETWORK" listunspent
  lndCommandlineInterfaceMainMenu
  }
listChainTxns () {
  checkLNDNetwork
  echo "List transactions from the wallet"
  #read -r -p "Paste the Public Key of the peer you want to disconnect with: `echo $'\n> '`" PUBKEYPEERDISCONNECT
  lncli --network="$LNCLINETWORK" listchaintxns 
  lndCommandlineInterfaceMainMenu
  }









sendPayment () {
  checkLNDNetwork
  echo "Open a channel to a node or an existing peer"
  read -r -p "Paste the Public Key of the peer you want to disconnect with: `echo $'\n> '`" PUBKEYPEERDISCONNECT
  lncli --network="$LNCLINETWORK" sendpayment "$PUBKEYPEERDISCONNECT"
  lndCommandlineInterfaceMainMenu
  }






listChannels () {
  checkLNDNetwork
  echo "Open a channel to a node or an existing peer"
  read -r -p "Paste the Public Key of the peer you want to disconnect with: `echo $'\n> '`" PUBKEYPEERDISCONNECT
  lncli --network="$LNCLINETWORK" disconnect "$PUBKEYPEERDISCONNECT"
  lndCommandlineInterfaceMainMenu
  }


echo "-----------------------------------------------------"
echo "Starting Bitcoin Core automated installer Beta 0.1.5"
echo "-----------------------------------------------------"
echo "******** To exit installer type control + Z *********"
echo ""
sudo sleep 1.5   
askUserForNetwork
askUserForBitcoinDataDir
askUerForBitcoinProgramToInstallOrRun







